#!/usr/bin/env python

from kafka.client import KafkaClient
from kafka.consumer import SimpleConsumer
from kafka.producer import SimpleProducer

# basic kafka consumer
class Consumer:
    def __init__(self, host, group, topic):
        self.client = KafkaClient(host)
        self.consumer = SimpleConsumer(self.client, group, topic, auto_commit=False) 
        # auto_commit=False to avoid FailedPayloadsError. Supposedly due to an older kafka version

    # return the next message in the kafka queue
    def consume(self):
        return self.consumer.get_message(block=True, timeout=None)
    def getConsumer(self):
        return self.consumer


class Producer:
    def __init__(self, host):
        client = KafkaClient(host)
        self.producer = SimpleProducer(client)

    def produce(self, topic, message):
        self.producer.send_messages(topic, message)

if __name__=="__main__":
    from io import BytesIO
    import msgpack
    from datetime import datetime

    topic = "kafkaTesting"
    host = "10.69.22.152"
    producer = Producer(host)  

    producer.produce(topic, "This is a message sent at: %s " % datetime.now())
    consumer = Consumer(host, "consumerTesting", topic)
    #consumer.consumer.seek(0,0) # start from the first message
    message = consumer.consume()
    print(message)

    # buf = BytesIO()
    # for i in message[1][3]: # location of value of the message
    #     buf.write(i)
    # buf.seek(0)
    # unpacker = msgpack.Unpacker(buf)
    # for unpacked in unpacker:
    #     print(unpacked)
 
